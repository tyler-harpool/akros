/**
 * Akros - Multi-Sport Betting Edge Detector
 * 
 * This system automatically analyzes betting markets for NBA, MLB, and NHL to identify
 * edges and value opportunities across multiple sportsbooks.
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const marked = require('marked');
const { Anthropic } = require('@anthropic-ai/sdk');

// Import our modules
const { getNbaOdds, getMlbOdds, getNhlOdds } = require('./oddsApiFunctions');
const { getNbaInjuryData, getMlbInjuryData, getNhlInjuryData } = require('./injuryFunctions');
const ExtendedThinkingAnalyzer = require('./extendedThinkingAnalyzer');

// Initialize the Anthropic client and analyzer
const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY,
});

const analyzer = new ExtendedThinkingAnalyzer(process.env.CLAUDE_API_KEY);

/**
 * Main function to analyze betting opportunities for a specific sport
 * @param {string} sport - The sport to analyze ('nba', 'mlb', 'nhl')
 * @returns {Promise<string>} The analysis results
 */
async function analyzeSportBettingOpportunities(sport) {
  console.log(`üîç Analyzing ${sport.toUpperCase()} betting opportunities with extended thinking...`);
  
  // Get odds data based on the sport
  let oddsData;
  let injuryData;
  
  // Fetch the appropriate data based on the sport
  switch(sport.toLowerCase()) {
    case 'mlb':
      oddsData = await getMlbOdds();
      injuryData = await getMlbInjuryData();
      break;
    case 'nhl':
      oddsData = await getNhlOdds();
      injuryData = await getNhlInjuryData();
      break;
    case 'nba':
    default:
      oddsData = await getNbaOdds();
      injuryData = await getNbaInjuryData();
      sport = 'nba'; // Ensure consistent naming
  }
  
  // Check if we have valid odds data
  if (!oddsData || !oddsData.length) {
    console.error(`No ${sport.toUpperCase()} data available from The Odds API.`);
    return `No ${sport.toUpperCase()} data available for analysis.`;
  }
  
  // Prepare the data for analysis
  const analysisData = {
    odds: oddsData,
    injuries: injuryData.injuries || [],
    date: new Date().toISOString()
  };
  
  // Additional sport-specific data enrichment could be added here
  
  // Analyze the data with Extended Thinking
  const claudeResponse = await analyzer.analyzeWithExtendedThinking(sport, analysisData, {
    thinkingBudget: 24000, // Increased for better analysis
    maxTokens: 32000,
    includeThinking: true,
    saveThinking: true
  });
  
  // Extract just the final response for the report
  const claudeAnalysis = claudeResponse.finalResponse || claudeResponse;
  
  return claudeAnalysis;
}

/**
 * Save analysis results to markdown and HTML files
 * @param {string} sport - The sport being analyzed
 * @param {string} analysis - The analysis content
 * @returns {Object} Paths to the saved files
 */
async function saveAnalysisToFiles(sport, analysis) {
  // Format date for file naming
  const now = new Date();
  const dateStr = now.toISOString().split('T')[0]; // YYYY-MM-DD
  const timeStr = now.toTimeString().split(' ')[0].replace(/:/g, '-'); // HH-MM-SS
  const dateTimeStr = `${dateStr}_${timeStr}`;
  
  // Create reports directory if it doesn't exist
  const reportsDir = path.join(__dirname, 'reports');
  const dateDir = path.join(reportsDir, dateStr);
  
  if (!fs.existsSync(reportsDir)) {
    fs.mkdirSync(reportsDir);
  }
  
  if (!fs.existsSync(dateDir)) {
    fs.mkdirSync(dateDir);
  }
  
  // Save complete analysis as markdown
  const fullReportPath = path.join(dateDir, `${sport.toLowerCase()}_edge_analysis_${dateTimeStr}.md`);
  fs.writeFileSync(fullReportPath, analysis);
  console.log(`\nüìù Full ${sport.toUpperCase()} analysis saved to ${fullReportPath}`);
  
  // Extract and save just the recommended bets section
  if (analysis.includes('RECOMMENDED BETS')) {
    console.log(`\nüéØ ${sport.toUpperCase()} RECOMMENDED BETS FOUND`);
    
    // Extract the table section from RECOMMENDED BETS to the next header or end
    let betSection = analysis.split('RECOMMENDED BETS')[1];
    const endMarkers = ['##', '\n\n\n', '\n---'];
    let endPos = betSection.length;
    
    for (const marker of endMarkers) {
      const pos = betSection.indexOf(marker);
      if (pos !== -1 && pos < endPos) {
        endPos = pos;
      }
    }
    
    betSection = betSection.substring(0, endPos).trim();
    
    // Check if the betSection actually contains a table
    if (betSection.includes('|')) {
      // Create a pretty markdown document with bets
      const todayStr = now.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      
      const betsMd = `# ${sport.toUpperCase()} Betting Recommendations
## ${todayStr}

## RECOMMENDED BETS
${betSection}

---
*Generated by ${sport.toUpperCase()} Edge Detection System with Extended Thinking on ${dateStr} at ${timeStr.replace(/-/g, ':')}*
`;
      
      const betsPath = path.join(dateDir, `${sport.toLowerCase()}_recommended_bets_${dateTimeStr}.md`);
      fs.writeFileSync(betsPath, betsMd);
      console.log(`üìä ${sport.toUpperCase()} recommended bets saved to ${betsPath}`);
      
      // Also create an HTML version for better table viewing
      const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${sport.toUpperCase()} Betting Recommendations - ${dateStr}</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      line-height: 1.6;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      color: #333;
    }
    h1, h2, h3 {
      color: #222;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin: 20px 0;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 12px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
      font-weight: bold;
    }
    tr:nth-child(even) {
      background-color: #f9f9f9;
    }
    tr:hover {
      background-color: #f1f1f1;
    }
    .footer {
      margin-top: 30px;
      font-size: 14px;
      color: #777;
      border-top: 1px solid #eee;
      padding-top: 10px;
    }
    .unit-1 { background-color: #f0f8ff; }
    .unit-2 { background-color: #e6f2ff; }
    .unit-3 { background-color: #cce5ff; }
    .unit-4 { background-color: #b3d7ff; }
    .unit-5 { background-color: #99c9ff; }
  </style>
</head>
<body>
  ${marked.parse(betsMd)}
  <script>
    // Highlight rows based on unit size
    document.addEventListener('DOMContentLoaded', function() {
      const tables = document.querySelectorAll('table');
      tables.forEach(table => {
        const rows = table.querySelectorAll('tbody tr');
        rows.forEach(row => {
          const cells = row.querySelectorAll('td');
          if (cells.length >= 5) {
            const stakeCell = cells[4]; // The stake column (assuming it's the 5th column)
            const stakeText = stakeCell.textContent.trim();
            const units = parseInt(stakeText.match(/\\d+/));
            if (!isNaN(units) && units >= 1 && units <= 5) {
              row.classList.add('unit-' + units);
            }
          }
        });
      });
    });
  </script>
</body>
</html>`;
      
      const htmlPath = path.join(dateDir, `${sport.toLowerCase()}_recommended_bets_${dateTimeStr}.html`);
      fs.writeFileSync(htmlPath, htmlContent);
      console.log(`üåê HTML version saved to ${htmlPath}`);
      
      return {
        fullReportPath,
        betsPath,
        htmlPath,
        betSection
      };
    } else {
      console.log(`\n‚ö†Ô∏è "${sport.toUpperCase()} RECOMMENDED BETS" section found but no table of bets included`);
      console.log('This likely indicates a formatting issue with Claude\'s response.');
    }
  } else {
    console.log(`\n‚ö†Ô∏è No recommended bets found in ${sport.toUpperCase()} analysis`);
  }
  
  return {
    fullReportPath
  };
}

/**
 * Determine which sports are in season based on the current date
 * @returns {string[]} Array of in-season sports ('nba', 'mlb', 'nhl')
 */
function getInSeasonSports() {
  const now = new Date();
  const month = now.getMonth() + 1; // JavaScript months are 0-indexed
  
  const inSeasonSports = [];
  
  // NBA season: October through June
  if (month >= 10 || month <= 6) {
    inSeasonSports.push('nba');
  }
  
  // MLB season: April through October
  if (month >= 4 && month <= 10) {
    inSeasonSports.push('mlb');
  }
  
  // NHL season: October through June
  if (month >= 10 || month <= 6) {
    inSeasonSports.push('nhl');
  }
  
  return inSeasonSports;
}

/**
 * Main execution function
 * Analyzes betting opportunities for all in-season sports
 */
async function main() {
  console.log('üèÜ Akros Multi-Sport Betting Edge Detector');
  console.log('=========================================');
  
  // Check if required API keys are set
  if (!process.env.ODDS_API_KEY) {
    console.error('ERROR: ODDS_API_KEY not found in environment variables');
    process.exit(1);
  }
  
  if (!process.env.CLAUDE_API_KEY) {
    console.error('ERROR: CLAUDE_API_KEY not found in environment variables');
    process.exit(1);
  }
  
  try {
    // Get in-season sports
    const inSeasonSports = getInSeasonSports();
    console.log(`In-season sports: ${inSeasonSports.join(', ').toUpperCase()}`);
    
    // Allow command line argument to specify sport
    const cmdLineSport = process.argv[2]?.toLowerCase();
    
    // If a specific sport is requested via command line and it's valid, only analyze that one
    if (cmdLineSport && ['nba', 'mlb', 'nhl'].includes(cmdLineSport)) {
      console.log(`Analyzing only ${cmdLineSport.toUpperCase()} as requested via command line`);
      
      const analysis = await analyzeSportBettingOpportunities(cmdLineSport);
      await saveAnalysisToFiles(cmdLineSport, analysis);
    } 
    // Otherwise, analyze all in-season sports
    else {
      for (const sport of inSeasonSports) {
        try {
          const analysis = await analyzeSportBettingOpportunities(sport);
          await saveAnalysisToFiles(sport, analysis);
        } catch (sportError) {
          console.error(`Error analyzing ${sport.toUpperCase()}:`, sportError);
          console.log(`Continuing with next sport...`);
        }
      }
    }
    
    console.log('\n‚úÖ Analysis complete! Check the reports directory for results.');
  } catch (error) {
    console.error('An error occurred during analysis:', error);
  }
}

// If this file is run directly (not imported), execute the main function
if (require.main === module) {
  main().catch(error => {
    console.error('Unhandled error in main execution:', error);
    process.exit(1);
  });
}

// Export functions for potential use in other modules
module.exports = {
  analyzeSportBettingOpportunities,
  saveAnalysisToFiles,
  getInSeasonSports
};